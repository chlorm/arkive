#!/usr/bin/env sh

## UNSUPPORTED: avi with multiple audio streams
## CONTAINERS WITH NO LANGUAGE CODES: avi,m2ts,ts
audio_stream_selector () {
  # Add all streams with audio into an array
  # <There is a lot or trickery required to get the stream
  #  number that is container specific, so 'or' statements were
  #  added to work around this>
  audioStreamArray=($(\
    ffprobe -i test4.mp4 2>&1 | \
    grep "Audio:" | \
    awk '/Stream\ #0:/ { print $2 }' | \
    grep -o -P '(?<=\#0\:)[0-9](?=\([a-z]+\)|\[[0-9]+x[0-9]+\]|\:)'))

  # Find total number of audio streams in the container
  audioStreamCount=$(${#audioStreamArray[@]})

  if [ -z "$audioStreamCount" ]; then
    echo "WARNING: No audio streams found"
  elif [ "$audioStreamCount" = "1" ]; then
    # Set stream number to the only one found
    audioPrefferedStream=$($audioStreamArray[1])

  # Containers with: mkv,mp4
  # MP4 has two audio lines, only one with a stream section
  elif [ "$audioStreamCount" -gt "1" ]; then
    # get pounded in the ass

    # Not sure where to start with this section

  # Find language of audio stream
  ffprobe -i test4.mp4 2>&1 | \
    # Gets line of streams
    grep "Stream #0:1" | \
    # Pulls first part of line containing language
    awk '/Stream\ #0:1/ { print $2 }' | \
    # Pulls the three digit language code
    # ISO 639-2/B
    grep -m 1 -o -P '(?<=\#0\:1\().*(?=\):)'
  # 3 
  #  if only one audio stream take it
  #  if not, see if any audio streams contain english
  #    if so, see if there are multiples
  #      select best option 
  #  if not, see if there is anything other than "und"
  #  if not, see if there are multiple und
  #    if so, pick best option
  else
    echo "ERROR: Video has no audio"
    exit 2
  fi

  # 4 Fuck Bitches
}
    
audio_input_sample_rate () {
  ffprobe -i $userInput 2>&1 | \
    grep -m 1 "Stream #0:$primaryAudioStream" | \
    awk -F ", " '/Hz/ { print $2 }'
}

## TODO: add support to automatically remap surround-sound channels in a consistent manner
## get rid of 5.1(side)  it is annoying on a 7.1 setup even if it is technically extended stereo
audio_channel_mapper () {
  # Finds channel layout
  # TODO: add $(audio_input_samplerate) function
  findChannelLayout=$(ffprobe -i $userInput 2>&1 | \
    grep -m 1 "Stream #0:$primaryAudioStream" | \
    awk -F ", " '/44100\ Hz/ { print $3 }')

  # Determine channel layout for later use
  # https://github.com/FFmpeg/FFmpeg/blob/master/libavutil/channel_layout.c
  # https://github.com/FFmpeg/FFmpeg/blob/master/doc/utils.texi

  # 0 = FL - Front Left
  # 1 = FR - Front Right
  # 2 = FC - Front Center
  # 3 = LFE - Low Frequency
  # 4 = BL - Back Left
  # 5 = BR - Back Fight
  # 6 = FLC - Front Left-of-Center
  # 7 = FRC - Front Right-of-Center
  # 8 = BC - Back Center
  # 9 = SL - Side Left
  # 10 = SR - Side Right
  # 11 = TC - Top Center
  # 12 = TFL - Top Front Left
  # 13 = TFC - Top Front Center
  # 14 = TFR - Top Front Right
  # 15 = TBL - Top Back Left
  # 16 = TBC - Top Back Center
  # 17 = TBR - Top Back Right
  # 29 = DL - Downmix Left
  # 30 = DR - Downmix Right
  # 31 = WL - Wide Left
  # 32 = WR - Wide Right
  # 33 = SDL - Surround Direct Right
  # 34 = SDR - Surround Direct Left
  # 35 = LFE2 - Low Frequency 2

  # TODO: for 5.1 and others re-map 5.1(side) to 5.1(rear)
  # TODO: 

  case "$findChannelLayout" in
    '')
      echo "ERROR: could not detect audio channel layout"
      exit 1
    'mono')
      audioChannels="1"
      # AV_CH_LAYOUT_MONO
      # FC
    'stereo')
      audioChannels="2"
      # AV_CH_LAYOUT_STEREO
      # FL+FR
    '2.1')
      audioChannels="3"
      # AV_CH_LAYOUT_2POINT1
      # FL+FR+LFE
    '3.0')
      audioChannels="3"
      # AV_CH_LAYOUT_SURROUND
      # FL+FR+FC
    '3.0(back)'
      audioChannels="3"
      # AV_CH_LAYOUT_2_1
      # FL+FR+BC
    '4.0')
      audioChannels="4"
      # AV_CH_LAYOUT_4POINT0
      # FL+FR+FC+BC
    'quad')
      audioChannels="4"
      # AV_CH_LAYOUT_QUAD
      # FL+FR+BL+BR
    'quad(side)')
      audioChannels="2"
      # AV_CH_LAYOUT_2_2
      # FL+FR+SL+SR
    '3.1')
      audioChannels="4"
      # AV_CH_LAYOUT_3POINT1
      # FL+FR+FC+LFE
    '4.1')
      audioChannels="5"
      # AV_CH_LAYOUT_4POINT1
      # FL+FR+FC+LFE+BC
    '5.0')
      audioChannels="5"
      # AV_CH_LAYOUT_5POINT0_BACK
      # FL+FR+FC+BL+BR
    '5.0(side)')
      audioChannels="5"
      # AV_CH_LAYOUT_5POINT0
      # FL+FR+FC+SL+SR
    '5.1')
      audioChannels="6"
      # AV_CH_LAYOUT_5POINT1_BACK
      # FL+FR+FC+LFE+BL+BR
    '5.1(side)')
      audioChannels="6"
      # AV_CH_LAYOUT_5POINT1
      # FL+FR+FC+LFE+SL+SR
    '6.0')
      audioChannels="6"
      # AV_CH_LAYOUT_6POINT0
      # FL+FR+FC+BC+SL+SR
    '6.0(front)')
      audioChannels="6"
      # AV_CH_LAYOUT_6POINT0_FRONT
      # FL+FR+FLC+FRC+SL+SR
    'hexagonal')
      audioChannels="6"
      # AV_CH_LAYOUT_HEXAGONAL
      # FL+FR+FC+BL+BR+BC
    '6.1')
      audioChannels="7"
      # AV_CH_LAYOUT_6POINT1
      # FL+FR+FC+LFE+BC+SL+SR
    '6.1(back)')
      audioChannels="7"
      ## TODO: fix upstream
      # actually 6.1, not 6.1(back), upstream typo
      # AV_CH_LAYOUT_6POINT1_BACK
      # FL+FR+FC+LFE+BL+BR+BC
    '6.1(front)')
      audioChannels="7"
      # AV_CH_LAYOUT_6POINT1_FRONT
      # FL+FR+LFE+FLC+FRC+SL+SR
    '7.0')
      audioChannels="7"
      # AV_CH_LAYOUT_7POINT0
      # FL+FR+FC+BL+BR+SL+SR
    '7.0(front)')
      audioChannels="7"
      # AV_CH_LAYOUT_7POINT0_FRONT
      # FL+FR+FC+FLC+FRC+SL+SR
    '7.1')
      audioChannels="8"
      # AV_CH_LAYOUT_7POINT1
      # FL+FR+FC+LFE+BL+BR+SL+SR
    '7.1(wide)')
      audioChannels="8"
      # AV_CH_LAYOUT_7POINT1_WIDE_BACK
      # FL+FR+FC+LFE+BL+BR+FLC+FRC
    '7.1(wide-side)')
      audioChannels="8"
      # AV_CH_LAYOUT_7POINT1_WIDE
      # FL+FR+FC+LFE+FLC+FRC+SL+SR
    'octagonal')
      audioChannels="8"
      # AV_CH_LAYOUT_OCTAGONAL
      # FL+FR+FC+BL+BR+BC+SL+SR
    'downmix')
      audioChannels="2"
      # AV_CH_LAYOUT_STEREO_DOWNMIX
      # DL+DR
    *)
      echo "ERROR: Unsupported channel layout"
      exit 1
  esac
}

audio () {
  audio_channel_layout
  # Bitrate per channel (set to 48kbps)
  audioBitrate=$(($audioChannels * 48))
  audioBitrateUnit="k"
  audioBitrate="$audioBitrate$audioBitrateUnit"
}